package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate joinPredicate;
    private OpIterator childOp1;
    private OpIterator childOp2;

    private Tuple currLhsTuple;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        joinPredicate = p;
        childOp1 = child1;
        childOp2 = child2;

        currLhsTuple = null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        int idx1 = joinPredicate.getField1();
        return childOp1.getTupleDesc().getFieldName(idx1);
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        int idx2 = joinPredicate.getField2();
        return childOp2.getTupleDesc().getFieldName(idx2);
    }

    /**
     * @see TupleDesc#merge
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        TupleDesc td1 = childOp1.getTupleDesc();
        TupleDesc td2 = childOp2.getTupleDesc();
        return TupleDesc.merge(td1, td2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        childOp1.open();
        childOp2.open();
    }

    public void close() {
        // some code goes here
        currLhsTuple = null;
        childOp1.close();
        childOp2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        close();
        open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here

        // Implementation: Nested loop join (Cartesian product)

        if (currLhsTuple == null) {
            updateCurrLhsTuple();
        }

        while (currLhsTuple != null) {
            while (childOp2.hasNext()) {
                Tuple rhsTuple = childOp2.next();
                if (joinPredicate.filter(currLhsTuple, rhsTuple)) {
                    TupleDesc td = getTupleDesc();
                    Tuple next = new Tuple(td);

                    Iterator<Field> lhsFields = currLhsTuple.fields();
                    Iterator<Field> rhsFields = rhsTuple.fields();
                    int i = 0;
                    while (lhsFields.hasNext()) {
                        next.setField(i, lhsFields.next());
                        i++;
                    }
                    while (rhsFields.hasNext()) {
                        next.setField(i, rhsFields.next());
                        i++;
                    }
                    return next;
                }
            }

            childOp2.rewind();
            updateCurrLhsTuple();
        }

        return null;
    }

    private void updateCurrLhsTuple() throws DbException, TransactionAbortedException {
        currLhsTuple = childOp1.hasNext() ? childOp1.next() : null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[]{childOp1, childOp2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        childOp1 = children[0];
        childOp2 = children[1];
    }

}
